#!/usr/bin/env node

const definitions = require('../definitions.js').registerDefinitions()
const throng = require('throng')
const fs = require('fs')
const https = require('https')

const WORKERS = process.env.WEB_CONCURRENCY || 1

throng({
  workers: WORKERS,
  lifetime: Infinity,
  start: start
})

function start(id){
/**
 * Module dependencies.
 */

  console.log(`Started worker ${ id }`)

  var app = require('../app')
  app.set('definitions', definitions)
  var debug = require('debug')('compute.appserver:server')


  /**
 * Get port from environment and store in Express.
 */

  var port = normalizePort(process.env.PORT || '3000')
  app.set('port', port)

  /**
 * Create HTTP server.
 */

  const privateKeyPath = '/etc/letsencrypt/live/testapi.pepperplot.com/privkey.pem'
  const certificatePath = '/etc/letsencrypt/live/testapi.pepperplot.com/fullchain.pem'

  const privateKey = fs.readFileSync(privateKeyPath, 'utf8')
  const certificate = fs.readFileSync(certificatePath, 'utf8')
  const credentials = { key: privateKey, cert: certificate }


  const server = https.createServer(credentials, app)

  /**
 * Listen on provided port, on all network interfaces.
 */

  server.listen(port)
  server.on('error', onError)
  server.on('listening', onListening)

  /**
 * Normalize a port into a number, string, or false.
 */

  function normalizePort(val) {
    var port = parseInt(val, 10)

    if (isNaN(port)) {
    // named pipe
      return val
    }

    if (port >= 0) {
    // port number
      return port
    }

    return false
  }

  /**
 * Event listener for HTTP server "error" event.
 */

  function onError(error) {
    if (error.syscall !== 'listen') {
      throw error
    }

    var bind = typeof port === 'string'
      ? 'Pipe ' + port
      : 'Port ' + port

    // handle specific listen errors with friendly messages
    switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges')
      process.exit(1)
      break
    case 'EADDRINUSE':
      console.error(bind + ' is already in use')
      process.exit(1)
      break
    default:
      throw error
    }
  }

  /**
 * Event listener for HTTP server "listening" event.
 */

  function onListening() {
    var addr = server.address()
    var bind = typeof addr === 'string'
      ? 'pipe ' + addr
      : 'port ' + addr.port
    debug('Listening on ' + bind)
    console.log('Listening on ' + bind)

    // print handy /view url
    if (typeof addr !== 'string') {
      console.log(`Go to viewer: http://localhost:${addr.port}/view`)
    }
  }
}
