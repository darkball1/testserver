<!DOCTYPE html>
<html>

<head>
  <meta charset="utf-8">
  <link rel="icon" href="data:,">
  <title>{{name}}</title>
  <style>
    body {
      margin: 0;
      font-family: Arial, Helvetica, sans-serif;

    }

    canvas {
      width: 100%;
      height: 100%;
    }

    input[type=range] {
      width: 100%;
    }

    #container {
      position: relative;
    }

    #container canvas,
    #overlay {
      position: absolute;
    }

    #overlay {
      z-index: 1;
      width: 25%;
      height: 600px;
      padding-left: 1%;
      padding-right: 1%;
      /* Adjust the height as needed */
      overflow-y: auto;
      scrollbar-width: none;
      /* Hide scrollbar in Firefox */
      -ms-overflow-style: none;
    }

    #overlay div {
      padding: 5px;
    }

    #overlay::-webkit-scrollbar {
      display: none;
      /* Hide scrollbar in Chrome, Safari, and Opera */
    }

    #loader {
      border: 5px solid #f3f3f3;
      /* Light grey */
      border-top: 5px solid #3d3d3d;
      /* Grey */
      border-radius: 50%;
      width: 40px;
      height: 40px;
      animation: spin 1s linear infinite;
      position: absolute;
      top: 50%;
      left: 50%;
      z-index: 2;
    }

    #output-container {
      position: fixed;
      top: 0;
      /* Adjust as needed */
      right: 0;
      /* Adjust as needed */
      padding: 20px;
      background-color: rgba(255, 255, 255, 0.8);
      border: 1px solid #ccc;
    }

    #output-container ul {
      list-style-type: none;
      padding: 0;
    }

    #output-container ul li {
      margin-bottom: 10px;
    }


    @keyframes spin {
      0% {
        transform: rotate(0deg);
      }

      100% {
        transform: rotate(360deg);
      }
    }
  </style>
</head>

<body>
  <div id="loader"></div>
  <div id="container">
    <div id="overlay">
      {{#each inputs}}
      <div>
        <label for="{{id}}">{{name}}</label>
        {{#number}}
        <input type="number" id="{{../id}}" value="{{value}}">
        {{/number}}
        {{#range}}
        <input type="range" id="{{../id}}" min="{{min}}" max="{{max}}" value="{{value}}" step="{{step}}">
        {{/range}}
        {{#bool}}
        <input type="checkbox" id="{{../id}}" {{#value}}checked{{/value}}>
        {{/bool}}
      </div>
      {{/each}}
    </div>


  </div>
  <div id="output-container">
    <ul id="output-list">
      <!-- JavaScript will populate list items here -->
    </ul>
  </div>
  <!-- Import maps polyfill -->
  <!-- Remove this when import maps will be widely supported -->
  <script async src="https://unpkg.com/es-module-shims@1.8.0/dist/es-module-shims.js"></script>

  <script type="importmap">
            {
                "imports": {
                    "three": "https://unpkg.com/three@0.158.0/build/three.module.js",
                    "three/examples/jsm/controls/OrbitControls": "https://unpkg.com/three@0.158.0/examples/jsm/controls/OrbitControls.js",
                    "three/examples/jsm/loaders/3DMLoader": "https://unpkg.com/three@0.158.0/examples/jsm/loaders/3DMLoader.js",
                    "rhino3dm":"https://unpkg.com/rhino3dm@8.0.0-beta3/rhino3dm.module.js",
                    "rhino_compute": "https://unpkg.com/compute-rhino3d@0.13.0-beta/compute.rhino3d.module.js"
                }
            }
        </script>

  <script type="module">
    import * as THREE from 'three'
    import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls'
    import { Rhino3dmLoader } from 'three/examples/jsm/loaders/3DMLoader'
    import rhino3dm from 'rhino3dm'
    import { RhinoCompute } from 'rhino_compute'

    // set up loader for converting the results to threejs
    const loader = new Rhino3dmLoader()
    loader.setLibraryPath('https://unpkg.com/rhino3dm@8.0.0-beta3/')

    // initialise 'data' object that will be used by compute()
    const data = {
      definition: '{{name}}',
      inputs: getInputs()
    }

    // globals
    let doc, scene, camera, renderer, controls

    let output_list = []

    const rhino = await rhino3dm()
    console.log('Loaded rhino3dm.')
    RhinoCompute.url = 'http://13.201.72.80/'
    RhinoCompute.apiKey = '123456'
    init()
    compute()


    /////////////////////////////////////////////////////////////////////////////
    //                            HELPER  FUNCTIONS                            //
    /////////////////////////////////////////////////////////////////////////////

    /**
     * Gets <input> elements from html and sets handlers
     * (html is generated from the grasshopper definition)
     */
    function getInputs() {
      const inputs = {}
      for (const input of document.getElementsByTagName('input')) {
        switch (input.type) {
          case 'number':
            inputs[input.id] = input.valueAsNumber
            input.onchange = onSliderChange
            break
          case 'range':
            inputs[input.id] = input.valueAsNumber
            input.onmouseup = onSliderChange
            input.ontouchend = onSliderChange
            break
          case 'checkbox':
            inputs[input.id] = input.checked
            input.onclick = onSliderChange
            break
          default:
            break
        }
      }
      return inputs
    }

    /**
     * Sets up the scene, camera, renderer, lights and controls and starts the animation
     */
    function init() {

      // Rhino models are z-up, so set this as the default
      THREE.Object3D.DefaultUp = new THREE.Vector3(0, 0, 1);

      // create a scene and a camera
      scene = new THREE.Scene()
      scene.background = new THREE.Color(1, 1, 1)
      camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 1, 1000)
      camera.position.set(1, -1, 1) // like perspective view

      // very light grey for background, like rhino
      scene.background = new THREE.Color('whitesmoke')

      // create the renderer and add it to the html
      renderer = new THREE.WebGLRenderer({ antialias: true })
      renderer.setPixelRatio(window.devicePixelRatio)
      renderer.setSize(window.innerWidth, window.innerHeight)
      document.body.appendChild(renderer.domElement)

      // add some controls to orbit the camera
      controls = new OrbitControls(camera, renderer.domElement)

      // add a directional light
      const directionalLight1 = new THREE.DirectionalLight(0xffffff);
      directionalLight1.intensity = 5; // Set intensity
      directionalLight1.position.set(0, 0, 100); // Set position
      scene.add(directionalLight1);

      const directionalLight2 = new THREE.DirectionalLight(0xffffff);
      directionalLight2.intensity = 5; // Set intensity
      directionalLight2.position.set(100, 0, 0); // Set position
      scene.add(directionalLight2);

      const directionalLight3 = new THREE.DirectionalLight(0xffffff);
      directionalLight3.intensity = 5; // Set intensity
      directionalLight3.position.set(0, 100, 0); // Set position
      scene.add(directionalLight3);


      const directionalLight4 = new THREE.DirectionalLight(0xffffff);
      directionalLight4.intensity = 5; // Set intensity
      directionalLight4.position.set(0, -100, 0); // Set position
      scene.add(directionalLight4);


      const directionalLight5 = new THREE.DirectionalLight(0xffffff);
      directionalLight5.intensity = 5; // Set intensity
      directionalLight5.position.set(-100, 0, 0); // Set position
      scene.add(directionalLight5);


      const directionalLight6 = new THREE.DirectionalLight(0xffffff);
      directionalLight6.intensity = 5; // Set intensity
      directionalLight6.position.set(0, 0, -100); // Set position
      scene.add(directionalLight6);

      // Create directional light 2
      // handle changes in the window size
      window.addEventListener('resize', onWindowResize, false)

      animate()
    }

    /**
     * Call appserver
     */
    async function compute() {
      // construct url for GET /solve/definition.gh?name=value(&...)
      const url = new URL('/solve/' + data.definition, window.location.origin)
      Object.keys(data.inputs).forEach(key => url.searchParams.append(key, data.inputs[key]))


      try {
        const response = await fetch(url)

        if (!response.ok) {
          // TODO: check for errors in response json
          throw new Error(response.statusText)
        }

        const responseJson = await response.json()


        collectResults(responseJson)

      } catch (error) {
        console.error(error)
      }
    }

    /**
     * Parse response
     */
    function collectResults(responseJson) {

      const values = responseJson.values

      // clear doc
      if (doc !== undefined)
        doc.delete()

      //console.log(values)
      doc = new rhino.File3dm()

      output_list = []

      // for each output (RH_OUT:*)...
      for (let i = 0; i < values.length; i++) {
        // ...iterate through data tree structure...
        for (const path in values[i].InnerTree) {
          const branch = values[i].InnerTree[path]
          // ...and for each branch...
          for (let j = 0; j < branch.length; j++) {
            // ...load rhino geometry into doc
            const rhinoObject = decodeItem(branch[j])

            //console.log(rhinoObject.vertexColors().count)
            if (rhinoObject !== null) {
              if (rhinoObject.constructor.name === 'File3dm') {

                const _doc = rhinoObject


                //add objects into the main doc
                for (let p = 0; p < _doc.objects().count; p++) {

                  const ro = _doc.objects().get(p)
                  const geo = ro.geometry()
                  const attr = ro.attributes()
                  const matIndex = attr.materialIndex
                  const mat = _doc.materials().get(matIndex)
                  attr.materialIndex = doc.materials().count - 1
                  doc.materials().add(mat)
                  doc.objects().add(geo, attr)

                }

              } else {
                doc.objects().add(rhinoObject, null)
              }



            }


          }
        }
      }


      const outputListElement = document.getElementById("output-list");
      outputListElement.innerHTML = '';

      output_list.forEach(item => {
        const li = document.createElement("li");
        li.textContent = item;
        outputListElement.appendChild(li);
      });


      if (doc.objects().count < 1) {
        console.error('No rhino objects to load!')
        showSpinner(false)
        return
      }

      // load rhino doc into three.js scene
      const buffer = new Uint8Array(doc.toByteArray()).buffer
      loader.parse(buffer, function (object) {
        // debug 
        /*
                object.traverse(child => {
                  if (child.material !== undefined)
                    child.material = new THREE.MeshNormalMaterial()
                }, false)
        
        */
        // clear objects from scene. do this here to avoid blink
        scene.traverse(child => {
          if (!child.isLight) {
            scene.remove(child)
          }
        })

        //console.log(object)

        // add object graph from rhino model to three.js scene
        scene.add(object)

        // hide spinner and enable download button
        showSpinner(false)
        downloadButton.disabled = false

        // zoom to extents
        zoomCameraToSelection(camera, controls, scene.children)
      })
    }

    /**
     * Attempt to decode data tree item to rhino geometry
     */
    function decodeItem(item) {
      const data = JSON.parse(item.data)
      if (item.type === 'System.String') {
        // hack for draco meshes
        try {

          const obj = rhino.DracoCompression.decompressBase64String(data)

          output_list.push(item['data'])
          console.log(output_list)

          if (obj === null) {

            //might be a whole doc
            const arr = _base64ToArrayBuffer(data)
            return rhino.File3dm.fromByteArray(arr)

          } else {

            return obj

          }

        } catch { } // ignore errors (maybe the string was just a string...)
      } else if (typeof data === 'object') {
        //console.log(data)
        return rhino.CommonObject.decode(data)
      }
      return null
    }

    /**
     * Called when a slider value changes in the UI. Collect all of the
     * slider values and call compute to solve for a new scene
     */
    function onSliderChange() {
      showSpinner(true)
      // get slider values
      let inputs = {}
      for (const input of document.getElementsByTagName('input')) {
        switch (input.type) {
          case 'number':
            inputs[input.id] = input.valueAsNumber
            break
          case 'range':
            inputs[input.id] = input.valueAsNumber
            break
          case 'checkbox':
            inputs[input.id] = input.checked
            break
        }
      }

      data.inputs = inputs

      compute()
    }

    /**
     * The animation loop!
     */
    function animate() {
      requestAnimationFrame(animate)
      controls.update()
      renderer.render(scene, camera)
    }

    /**
     * Helper function for window resizes (resets the camera pov and renderer size)
      */
    function onWindowResize() {
      camera.aspect = window.innerWidth / window.innerHeight
      camera.updateProjectionMatrix()
      renderer.setSize(window.innerWidth, window.innerHeight)
      animate()
    }

    /**
     * Helper function that behaves like rhino's "zoom to selection", but for three.js!
     */
    function zoomCameraToSelection(camera, controls, selection, fitOffset = 1.2) {

      const box = new THREE.Box3();

      for (const object of selection) {
        if (object.isLight) continue
        box.expandByObject(object);
      }

      const size = box.getSize(new THREE.Vector3());
      const center = box.getCenter(new THREE.Vector3());

      const maxSize = Math.max(size.x, size.y, size.z);
      const fitHeightDistance = maxSize / (2 * Math.atan(Math.PI * camera.fov / 360));
      const fitWidthDistance = fitHeightDistance / camera.aspect;
      const distance = fitOffset * Math.max(fitHeightDistance, fitWidthDistance);

      const direction = controls.target.clone()
        .sub(camera.position)
        .normalize()
        .multiplyScalar(distance);
      controls.maxDistance = distance * 10;
      controls.target.copy(center);

      camera.near = distance / 100;
      camera.far = distance * 100;
      camera.updateProjectionMatrix();
      camera.position.copy(controls.target).sub(direction);

      controls.update();

    }

    /**
     * This function is called when the download button is clicked
     */
    function download() {
      // write rhino doc to "blob"
      const bytes = doc.toByteArray()
      const blob = new Blob([bytes], { type: "application/octect-stream" })

      // use "hidden link" trick to get the browser to download the blob
      const filename = data.definition.replace(/\.gh$/, '') + '.3dm'
      const link = document.createElement('a')
      link.href = window.URL.createObjectURL(blob)
      link.download = filename
      link.click()
    }

    /**
     * Shows or hides the loading spinner
     */
    function showSpinner(enable) {
      if (enable)
        document.getElementById('loader').style.display = 'block'
      else
        document.getElementById('loader').style.display = 'none'
    }

    // from https://stackoverflow.com/a/21797381
    function _base64ToArrayBuffer(base64) {
      var binary_string = window.atob(base64);
      var len = binary_string.length;
      var bytes = new Uint8Array(len);
      for (var i = 0; i < len; i++) {
        bytes[i] = binary_string.charCodeAt(i);
      }

      return bytes.buffer;
    }


  </script>
</body>

</html>